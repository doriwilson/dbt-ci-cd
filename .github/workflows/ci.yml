name: CI_action

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  CI_job:
    runs-on: ubuntu-latest

    # ❄️ Snowflake creds (create these in repo Secrets)
    env:
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}      # or key-pair (see note)
      SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}

      DBT_TARGET: pr
      # Cache key we expect main to write to (see snippet below)
      PROD_MANIFEST_CACHE_KEY: dbt-manifest-main-v1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies (dbt-snowflake)
        # Ensure dbt-requirements.txt includes: dbt-snowflake==1.8.*
        run: pip install -r dbt-requirements.txt

      # ---- Get PR-scoped schema suffix ----
      - name: Get Schema ID
        id: schema_id
        run: echo "SCHEMA_ID=${{ github.event.pull_request.number }}__${{ github.sha }}" >> $GITHUB_ENV

      # ---- Restore manifest from MAIN for slim CI ----
      - name: Restore production manifest cache (from main)
        id: restore-manifest
        uses: actions/cache/restore@v4
        with:
          path: state
          key: ${{ env.PROD_MANIFEST_CACHE_KEY }}
          restore-keys: |
            dbt-manifest-main-

      - name: Use state manifest if present
        run: |
          if [ -f "./state/manifest.json" ]; then
            cp ./state/manifest.json ./manifest.json
            echo "Using manifest.json from main for state:modified+ and --defer"
          else
            echo "No production manifest found; running a full PR build"
          fi

      # ---- dbt steps ----
      - name: dbt debug
        run: dbt debug --target $DBT_TARGET --vars "schema_id: $SCHEMA_ID"

      - name: dbt deps
        run: dbt deps --target $DBT_TARGET --vars "schema_id: $SCHEMA_ID"

      - name: dbt build (slim CI when state is available)
        run: |
          if [ -f "./manifest.json" ]; then
            dbt build -s 'state:modified+' --defer --state ./ --target $DBT_TARGET --vars "schema_id: $SCHEMA_ID"
          else
            dbt build --target $DBT_TARGET --vars "schema_id: $SCHEMA_ID"
          fi
