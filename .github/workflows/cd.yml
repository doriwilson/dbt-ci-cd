name: CD_action

on:
  push:
    branches: [ main ]

jobs:
  CD_job:
    runs-on: ubuntu-latest

    # ü¶Ü DuckDB configuration (no external credentials needed)
    env:
      MANIFEST_ARTIFACT_NAME: dbt-manifest
      DBT_TARGET: prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies (dbt-duckdb)
        # Ensure your dbt-requirements.txt includes: dbt-duckdb and recce
        run: pip install -r dbt-requirements.txt

      # ---- State handling (manifest.json) via artifacts ----
      - name: Check for existing artifacts
        shell: bash
        run: |
          echo "üîç Checking for existing artifacts..."
          echo "Repository: ${{ github.repository }}"
          echo "Manifest artifact name: ${{ env.MANIFEST_ARTIFACT_NAME }}"
          
          # Create state directory first
          mkdir -p state
          
          # Try to fetch artifacts, but don't fail if it doesn't work
          echo "Attempting to fetch artifact list from GitHub API..."
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" \
              -o artifacts.json || {
            echo "‚ö†Ô∏è Could not fetch artifact list (this is normal for first run)"
            echo "Proceeding with full build - artifacts will be created"
            exit 0
          }
          
          # Check if we got a valid response
          if [ ! -f "artifacts.json" ] || [ ! -s "artifacts.json" ]; then
            echo "‚ö†Ô∏è No artifact list received (this is normal for first run)"
            echo "Proceeding with full build - artifacts will be created"
            exit 0
          fi
          
          echo "üìÑ Artifact list received, searching for manifest..."

          # Extract correct artifact ID by getting download URL
          artifact_id=$(grep -A10 '"name": "${{ env.MANIFEST_ARTIFACT_NAME }}"' artifacts.json \
            | grep '"archive_download_url":' \
            | head -n1 \
            | sed 's/.*artifacts\/\([0-9]*\)\/zip.*/\1/')

          if [ -z "$artifact_id" ]; then
            echo "‚ö†Ô∏è Artifact '${{ env.MANIFEST_ARTIFACT_NAME }}' not found."
            echo "This is expected for the first run - will do full build"
            echo "Artifacts will be created for future runs"
            exit 0
          fi

          echo "‚úÖ Found artifact ID: $artifact_id"
          echo "‚¨áÔ∏è Downloading artifact..."

          curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$artifact_id/zip" \
              -o artifact.zip

          if [ -f "artifact.zip" ] && [ -s "artifact.zip" ]; then
            unzip -q artifact.zip -d state
            echo "‚úÖ Artifact extracted to ./state/"
            ls -lh state
          else
            echo "‚ö†Ô∏è Downloaded artifact is empty or corrupted"
            echo "Creating empty state directory for consistency"
            mkdir -p state
          fi

      - name: Use state manifest if present
        run: |
          if [ -f "./state/manifest.json" ]; then
            cp ./state/manifest.json ./manifest.json
            echo "Found previous manifest.json; using state:modified+"
          else
            echo "No previous manifest.json found; running full build"
            echo "This is expected for the first run"
          fi

      # ---- dbt steps ----
      - name: dbt debug
        run: dbt debug --target $DBT_TARGET

      - name: dbt deps
        run: dbt deps --target $DBT_TARGET

      - name: dbt build (stateful when possible)
        run: |
          if [ -f "./manifest.json" ]; then
            dbt build -s 'state:modified+' --state ./state --target $DBT_TARGET
          else
            dbt build --target $DBT_TARGET
          fi

      - name: Generate dbt docs for Recce compatibility
        run: |
          echo "üìö Generating dbt docs for future Recce comparisons..."
          dbt docs generate --target $DBT_TARGET || {
            echo "‚ö†Ô∏è dbt docs generation failed, but continuing deployment"
          }

      - name: Upload new manifest artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MANIFEST_ARTIFACT_NAME }}
          path: ./target/manifest.json
          if-no-files-found: error
          retention-days: 7

      - name: Upload catalog artifact for Recce
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dbt-catalog
          path: ./target/catalog.json
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload run results for Recce
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dbt-run-results
          path: ./target/run_results.json
          if-no-files-found: ignore
          retention-days: 7
